{
  "language": "Solidity",
  "sources": {
    "contracts/Lock.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.9;\n\n// Uncomment this line to use console.log\n// import \"hardhat/console.sol\";\n\ncontract Lock {\n    uint256 public unlockTime;\n    address payable public owner;\n\n    event Withdrawal(uint256 amount, uint256 when);\n\n    constructor(uint256 _unlockTime) payable {\n        require(\n            block.timestamp < _unlockTime,\n            \"Unlock time should be in the future\"\n        );\n\n        unlockTime = _unlockTime;\n        owner = payable(msg.sender);\n    }\n\n    function withdraw() public {\n        // Uncomment this line, and the import of \"hardhat/console.sol\", to print a log in your terminal\n        // console.log(\"Unlock time is %o and block timestamp is %o\", unlockTime, block.timestamp);\n\n        require(block.timestamp >= unlockTime, \"You can't withdraw yet\");\n        require(msg.sender == owner, \"You aren't the owner\");\n\n        emit Withdrawal(address(this).balance, block.timestamp);\n\n        owner.transfer(address(this).balance);\n    }\n\n    function isOwner() public view {\n        require(\n            owner == msg.sender,\n            \"The wallet is no te the owner of the contract\"\n        );\n    }\n}\n"
    },
    "contracts/PetShop.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.17;\n\ncontract PetShop {\n    address[16] public adopters;\n\n    function adopt(uint256 _petId) public returns (uint256) {\n        require(_petId >= 0 && _petId <= 15, \"Invalid ID\");\n\n        adopters[_petId] = msg.sender;\n\n        return _petId;\n    }\n\n    function getAdopters() public view returns (address[16] memory) {\n        return adopters;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}